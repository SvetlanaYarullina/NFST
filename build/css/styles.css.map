{"version":3,"sources":["variables/_typography.scss","variables/_mixins.scss","../../node_modules/bootstrap/scss/_grid.scss","global.scss","../../node_modules/bootstrap/scss/mixins/_grid.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss","variables/_make-grid-columns.scss","styles.css","../../node_modules/bootstrap/scss/_containers.scss","../../node_modules/bootstrap/scss/mixins/_container.scss","blocks/footer.scss","blocks/header.scss"],"names":[],"mappings":"AAAA,M,CACE,U,CCCA,oCDFF,M,CAGI,WEEF,I,CCLF,I,CAGE,Y,CDEA,I,CEAA,oB,CACA,e,CAEA,c,CAEA,sC,CACA,yC,CACA,wC,CFPA,M,CEgBA,a,CACA,U,CACA,c,CACA,yC,CACA,wC,CACA,6B,CCqCE,yBCxDQ,O,CACI,U,CAGJ,mB,CF8BV,a,CACA,U,CAcA,gB,CACE,a,CACA,U,CAFF,gB,CACE,a,CACA,S,CAFF,gB,CACE,a,CACA,e,CAFF,gB,CACE,a,CACA,S,CAFF,gB,CACE,a,CACA,S,CEnCQ,Y,CFiCV,gB,CACE,a,CACA,e,CEnCQ,Y,CFmBV,U,CEbkB,S,CAAA,S,CFEhB,a,CACA,S,CEHgB,S,CFGhB,U,CEMoB,Y,CFStB,a,CETsB,Y,CFStB,e,CEEc,O,CCWd,Q,CDTkB,e,CAGJ,O,CCSd,Q,CDPkB,e,CAPJ,O,CCiBd,Q,CDfkB,qB,CAGJ,O,CCed,Q,CDbkB,qB,CAPJ,O,CCuBd,Q,CDrBkB,oB,CAGJ,O,CCqBd,Q,CDnBkB,oB,CAPJ,O,CC6Bd,Q,CD3BkB,kB,CAGJ,O,CC2Bd,Q,CDzBkB,kB,CAPJ,O,CCmCd,Q,CDjCkB,oB,CAGJ,O,CCiCd,Q,CD/BkB,oB,CAPJ,O,CCyCd,Q,CDvCkB,kB,CAGJ,O,CCuCd,Q,CDrCkB,oB,ADOhB,0BCxDQ,O,CACI,U,CAGJ,mB,CF8BV,a,CACA,U,CAcA,gB,CACE,a,CACA,U,CAFF,gB,CACE,a,CACA,S,CAFF,gB,CACE,a,CACA,e,CAFF,gB,CACE,a,CACA,S,CAFF,gB,CACE,a,CACA,S,CEnCQ,Y,CFiCV,gB,CACE,a,CACA,e,CEnCQ,Y,CFmBV,U,CEbkB,S,CAAA,S,CFEhB,a,CACA,S,CEHgB,S,CFGhB,U,CEMoB,Y,CFStB,a,CETsB,Y,CFStB,e,CEEc,O,CCqFd,Q,CDnFkB,e,CAGJ,O,CCmFd,Q,CDjFkB,e,CAPJ,O,CC2Fd,Q,CDzFkB,qB,CAGJ,O,CCyFd,Q,CDvFkB,qB,CAPJ,O,CCiGd,Q,CD/FkB,oB,CAGJ,O,CC+Fd,Q,CD7FkB,oB,CAPJ,O,CCuGd,Q,CDrGkB,kB,CAGJ,O,CCqGd,Q,CDnGkB,kB,CAPJ,O,CC6Gd,Q,CD3GkB,oB,CAGJ,O,CC2Gd,Q,CDzGkB,oB,CAPJ,O,CCmHd,Q,CDjHkB,kB,CAGJ,O,CCiHd,Q,CD/GkB,oB,ADOhB,+CCxDQ,O,CA6DQ,W,CAzDR,mB,CF8BV,a,CACA,U,CAcA,gB,CACE,a,CACA,U,CAFF,gB,CACE,a,CACA,S,CAFF,gB,CACE,a,CACA,e,CAFF,gB,CACE,a,CACA,S,CAFF,gB,CACE,a,CACA,S,CEnCQ,Y,CFiCV,gB,CACE,a,CACA,e,CEnCQ,Y,CFmBV,U,CEbkB,S,CAAA,S,CFEhB,a,CACA,e,CEHgB,S,CFGhB,e,CEyDoB,S,CAAA,S,CF1DpB,a,CACA,S,CEyDoB,S,CFzDpB,e,CEyDoB,S,CAAA,S,CF1DpB,a,CACA,e,CEyDoB,S,CFzDpB,U,CEMoB,Y,CFStB,a,CETsB,Y,CFStB,qB,CEmD0B,Y,CFnD1B,qB,CEmD0B,Y,CFnD1B,e,CEmD0B,Y,CFnD1B,qB,CEmD0B,Y,CFnD1B,qB,CEEc,O,CCmLd,Q,CDrHsB,e,CAzDR,O,CCiLd,Q,CDnHsB,e,CAnER,O,CCyLd,Q,CD3HsB,qB,CAzDR,O,CCuLd,Q,CDzHsB,qB,CAnER,O,CC+Ld,Q,CDjIsB,oB,CAzDR,O,CC6Ld,Q,CD/HsB,oB,CAnER,O,CCqMd,Q,CDvIsB,kB,CAzDR,O,CCmMd,Q,CDrIsB,kB,CAnER,O,CC2Md,Q,CD7IsB,oB,CAzDR,O,CCyMd,Q,CD3IsB,oB,CAnER,O,CCiNd,Q,CDnJsB,kB,CAzDR,O,CC+Md,Q,CDjJsB,oB,ADrDpB,gDCxDQ,O,CA6DQ,W,CAzDR,mB,CF8BV,a,CACA,U,CAcA,gB,CACE,a,CACA,U,CAFF,gB,CACE,a,CACA,S,CAFF,gB,CACE,a,CACA,e,CAFF,gB,CACE,a,CACA,S,CAFF,gB,CACE,a,CACA,S,CEnCQ,Y,CFiCV,gB,CACE,a,CACA,e,CEnCQ,Y,CFmBV,U,CEbkB,S,CAAA,S,CFEhB,a,CACA,e,CEHgB,S,CFGhB,e,CEyDoB,S,CAAA,S,CF1DpB,a,CACA,S,CEyDoB,S,CFzDpB,e,CEyDoB,S,CAAA,S,CF1DpB,a,CACA,e,CEyDoB,S,CFzDpB,U,CEMoB,Y,CFStB,a,CETsB,Y,CFStB,qB,CEmD0B,Y,CFnD1B,qB,CEmD0B,Y,CFnD1B,e,CEmD0B,Y,CFnD1B,qB,CEmD0B,Y,CFnD1B,qB,CEEc,O,CCiRd,Q,CDnNsB,e,CAzDR,O,CC+Qd,Q,CDjNsB,e,CAnER,O,CCuRd,Q,CDzNsB,qB,CAzDR,O,CCqRd,Q,CDvNsB,qB,CAnER,O,CC6Rd,Q,CD/NsB,oB,CAzDR,O,CC2Rd,Q,CD7NsB,oB,CAnER,O,CCmSd,Q,CDrOsB,kB,CAzDR,O,CCiSd,Q,CDnOsB,kB,CAnER,O,CCySd,Q,CD3OsB,oB,CAzDR,O,CCuSd,Q,CDzOsB,oB,CAnER,O,CC+Sd,Q,CDjPsB,kB,CAzDR,O,CC6Sd,Q,CD/OsB,oBE9GtB,U,CDiWF,gB,CAEA,a,CADA,a,CErWE,U,CACA,mC,CACA,kC,CACA,iB,CACA,gB,CJwDE,yBGjDA,a,CAMI,6B,AH2CJ,0BGjDA,a,CAAA,a,CAMI,kBLpBR,I,CACE,e,CACA,gB,CAEA,qB,CACA,iB,CACA,W,CACA,qB,CAPF,I,CIiYE,M,CACA,W,CACA,Y,CJtXE,qB,CAIJ,I,CACE,iB,CACA,S,CACA,W,CAGF,C,CACE,oB,CACA,uC,CAGF,C,CACE,Y,CACA,iB,CAFF,Y,CAII,e,CAIJ,E,CIkXA,E,CACA,E,CACA,E,CACA,E,CACA,E,CJhXE,Y,CAGF,G,CACE,iB,CO9CF,M,CCAA,M,CACE,Y,CACA,oB,CDFF,M,CAEE,sB","file":"styles.css","sourcesContent":[".title {\r\n  color: white;\r\n  @include min-tablet {    \r\n    color: red;\r\n  }  \r\n}","// mobile first\r\n@mixin min-tablet {\r\n  @media screen and (min-width: $tablet) {\r\n    @content;\r\n  }\r\n}","// Row\n//\n// Rows contain your columns.\n\n@if $enable-grid-classes {\n  .row {\n    @include make-row();\n\n    > * {\n      @include make-col-ready();\n    }\n  }\n}\n\n@if $enable-cssgrid {\n  .grid {\n    display: grid;\n    grid-template-rows: repeat(var(--#{$variable-prefix}rows, 1), 1fr);\n    grid-template-columns: repeat(var(--#{$variable-prefix}columns, #{$grid-columns}), 1fr);\n    gap: var(--#{$variable-prefix}gap, #{$grid-gutter-width});\n\n    @include make-cssgrid();\n  }\n}\n\n\n// Columns\n//\n// Common styles for small and large grid columns\n\n@if $enable-grid-classes {\n  @include make-grid-columns();\n}\n","body {\r\n  max-width: 100vw;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-x: hidden;\r\n  margin: auto;\r\n  background-color: black;\r\n\r\n  &,\r\n  & *,\r\n  *:after,\r\n  *:before {\r\n    box-sizing: border-box;\r\n  }\r\n}\r\n\r\nmain {\r\n  position: relative;\r\n  z-index: 1;\r\n  flex-grow: 1;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  -webkit-tap-highlight-color: transparent;\r\n}\r\n\r\np {\r\n  margin-top: 0;\r\n  margin-bottom: 1em;\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin-top: 0;\r\n}\r\n\r\nsvg {\r\n  fill: currentColor;\r\n}","// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-row($gutter: $grid-gutter-width) {\n  --#{$variable-prefix}gutter-x: #{$gutter};\n  --#{$variable-prefix}gutter-y: 0;\n  display: flex;\n  flex-wrap: wrap;\n  // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed\n  margin-top: calc(-1 * var(--#{$variable-prefix}gutter-y)); // stylelint-disable-line function-disallowed-list\n  margin-right: calc(-.5 * var(--#{$variable-prefix}gutter-x)); // stylelint-disable-line function-disallowed-list\n  margin-left: calc(-.5 * var(--#{$variable-prefix}gutter-x)); // stylelint-disable-line function-disallowed-list\n}\n\n@mixin make-col-ready($gutter: $grid-gutter-width) {\n  // Add box sizing if only the grid is loaded\n  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we set the width\n  // later on to override this initial width.\n  flex-shrink: 0;\n  width: 100%;\n  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid\n  padding-right: calc(var(--#{$variable-prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list\n  padding-left: calc(var(--#{$variable-prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list\n  margin-top: var(--#{$variable-prefix}gutter-y);\n}\n\n@mixin make-col($size: false, $columns: $grid-columns) {\n  @if $size {\n    flex: 0 0 auto;\n    width: percentage(divide($size, $columns));\n\n  } @else {\n    flex: 1 1 0;\n    max-width: 100%;\n  }\n}\n\n@mixin make-col-auto() {\n  flex: 0 0 auto;\n  width: auto;\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: divide($size, $columns);\n  margin-left: if($num == 0, 0, percentage($num));\n}\n\n// Row columns\n//\n// Specify on a parent element(e.g., .row) to force immediate children into NN\n// numberof columns. Supports wrapping to new lines, but does not do a Masonry\n// style grid.\n@mixin row-cols($count) {\n  > * {\n    flex: 0 0 auto;\n    width: divide(100%, $count);\n  }\n}\n\n// Framework grid generation\n//\n// Used only by Bootstrap to generate the correct number of grid classes given\n// any value of `$grid-columns`.\n\n@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      // Provide basic `.col-{bp}` classes for equal-width flexbox columns\n      .col#{$infix} {\n        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4\n      }\n\n      .row-cols#{$infix}-auto > * {\n        @include make-col-auto();\n      }\n\n      @if $grid-row-columns > 0 {\n        @for $i from 1 through $grid-row-columns {\n          .row-cols#{$infix}-#{$i} {\n            @include row-cols($i);\n          }\n        }\n      }\n\n      .col#{$infix}-auto {\n        @include make-col-auto();\n      }\n\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          .col#{$infix}-#{$i} {\n            @include make-col($i, $columns);\n          }\n        }\n\n        // `$columns - 1` because offsetting by the width of an entire row isn't possible\n        @for $i from 0 through ($columns - 1) {\n          @if not ($infix == \"\" and $i == 0) { // Avoid emitting useless .offset-0\n            .offset#{$infix}-#{$i} {\n              @include make-col-offset($i, $columns);\n            }\n          }\n        }\n      }\n\n      // Gutters\n      //\n      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.\n      @each $key, $value in $gutters {\n        .g#{$infix}-#{$key},\n        .gx#{$infix}-#{$key} {\n          --#{$variable-prefix}gutter-x: #{$value};\n        }\n\n        .g#{$infix}-#{$key},\n        .gy#{$infix}-#{$key} {\n          --#{$variable-prefix}gutter-y: #{$value};\n        }\n      }\n    }\n  }\n}\n\n@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          .g-col#{$infix}-#{$i} {\n            grid-column: auto / span $i;\n          }\n        }\n\n        // Start with `1` because `0` is and invalid value.\n        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.\n        @for $i from 1 through ($columns - 1) {\n          .g-start#{$infix}-#{$i} {\n            grid-column-start: $i;\n          }\n        }\n      }\n    }\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","﻿@import './media';\r\n@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {\r\n    @each $breakpoint in map-keys($breakpoints) {\r\n        $infix: breakpoint-infix($breakpoint, $breakpoints);\r\n\r\n        @include media-breakpoint-up($breakpoint, $breakpoints) {\r\n            // Provide basic `.col-{bp}` classes for equal-width flexbox columns\r\n            .col#{$infix} {\r\n                flex: 1 0 0; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4\r\n            }\r\n\r\n            .row-cols#{$infix}-auto > * {\r\n                @include make-col-auto();\r\n            }\r\n\r\n            @if $grid-row-columns > 0 {\r\n                @for $i from 1 through $grid-row-columns {\r\n                    .row-cols#{$infix}-#{$i} {\r\n                        @include row-cols($i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            .col#{$infix}-auto {\r\n                @include make-col-auto();\r\n            }\r\n\r\n            @if $grid-columns-xs > 0 {\r\n                @for $i from 1 through $grid-columns-xs {\r\n                    .col#{$infix}-#{$i} {\r\n                        @include make-col($i, $grid-columns-xs);\r\n                    }\r\n                }\r\n\r\n                // `$grid-columns-xs - 1` because offsetting by the width of an entire row isn't possible\r\n                @for $i from 0 through ($grid-columns-xs - 1) {\r\n                    @if not($infix == '' and $i == 0) {\r\n                        // Avoid emitting useless .offset-0\r\n                        .offset#{$infix}-#{$i} {\r\n                            @include make-col-offset($i, $grid-columns-xs);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Gutters\r\n            //\r\n            // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.\r\n            @each $key, $value in $gutters {\r\n                .g#{$infix}-#{$key},\r\n                .gx#{$infix}-#{$key} {\r\n                    --#{$variable-prefix}gutter-x: #{$value};\r\n                }\r\n\r\n                .g#{$infix}-#{$key},\r\n                .gy#{$infix}-#{$key} {\r\n                    --#{$variable-prefix}gutter-y: #{$value};\r\n                }\r\n            }\r\n        }\r\n    }\r\n    @media (min-width: $tablet) {\r\n        @each $breakpoint in map-keys($breakpoints) {\r\n            $infix: breakpoint-infix($breakpoint, $breakpoints);\r\n\r\n            @include media-breakpoint-up($breakpoint, $breakpoints) {\r\n                // Provide basic `.col-{bp}` classes for equal-width flexbox columns\r\n                .col#{$infix} {\r\n                    flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4\r\n                }\r\n\r\n                .row-cols#{$infix}-auto > * {\r\n                    @include make-col-auto();\r\n                }\r\n\r\n                @if $grid-row-columns > 0 {\r\n                    @for $i from 1 through $grid-row-columns {\r\n                        .row-cols#{$infix}-#{$i} {\r\n                            @include row-cols($i);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                .col#{$infix}-auto {\r\n                    @include make-col-auto();\r\n                }\r\n\r\n                @if $grid-columns-sm > 0 {\r\n                    @for $i from 1 through $grid-columns-sm {\r\n                        .col#{$infix}-#{$i} {\r\n                            @include make-col($i, $grid-columns-sm);\r\n                        }\r\n                    }\r\n\r\n                    // `$grid-columns-sm - 1` because offsetting by the width of an entire row isn't possible\r\n                    @for $i from 0 through ($grid-columns-sm - 1) {\r\n                        @if not($infix == '' and $i == 0) {\r\n                            // Avoid emitting useless .offset-0\r\n                            .offset#{$infix}-#{$i} {\r\n                                @include make-col-offset($i, $grid-columns-sm);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Gutters\r\n                //\r\n                // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.\r\n                @each $key, $value in $gutters {\r\n                    .g#{$infix}-#{$key},\r\n                    .gx#{$infix}-#{$key} {\r\n                        --#{$variable-prefix}gutter-x: #{$value};\r\n                    }\r\n\r\n                    .g#{$infix}-#{$key},\r\n                    .gy#{$infix}-#{$key} {\r\n                        --#{$variable-prefix}gutter-y: #{$value};\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",".title {\n  color: white; }\n  @media screen and (min-width: 768px) {\n    .title {\n      color: red; } }\n\n.row {\n  --bs-gutter-x: 1.5rem;\n  --bs-gutter-y: 0;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: calc(-1 * var(--bs-gutter-y));\n  margin-right: calc(-.5 * var(--bs-gutter-x));\n  margin-left: calc(-.5 * var(--bs-gutter-x)); }\n  .row > * {\n    flex-shrink: 0;\n    width: 100%;\n    max-width: 100%;\n    padding-right: calc(var(--bs-gutter-x) * .5);\n    padding-left: calc(var(--bs-gutter-x) * .5);\n    margin-top: var(--bs-gutter-y); }\n\n@media (min-width: 360px) {\n  .col-xs {\n    flex: 1 0 0; }\n  .row-cols-xs-auto > * {\n    flex: 0 0 auto;\n    width: auto; }\n  .row-cols-xs-1 > * {\n    flex: 0 0 auto;\n    width: 100%; }\n  .row-cols-xs-2 > * {\n    flex: 0 0 auto;\n    width: 50%; }\n  .row-cols-xs-3 > * {\n    flex: 0 0 auto;\n    width: 33.33333%; }\n  .row-cols-xs-4 > * {\n    flex: 0 0 auto;\n    width: 25%; }\n  .row-cols-xs-5 > * {\n    flex: 0 0 auto;\n    width: 20%; }\n  .row-cols-xs-6 > * {\n    flex: 0 0 auto;\n    width: 16.66667%; }\n  .col-xs-auto {\n    flex: 0 0 auto;\n    width: auto; }\n  .col-xs-1 {\n    flex: 0 0 auto;\n    width: 50%; }\n  .col-xs-2 {\n    flex: 0 0 auto;\n    width: 100%; }\n  .offset-xs-0 {\n    margin-left: 0; }\n  .offset-xs-1 {\n    margin-left: 50%; }\n  .g-xs-0,\n  .gx-xs-0 {\n    --bs-gutter-x: 0; }\n  .g-xs-0,\n  .gy-xs-0 {\n    --bs-gutter-y: 0; }\n  .g-xs-1,\n  .gx-xs-1 {\n    --bs-gutter-x: 0.25rem; }\n  .g-xs-1,\n  .gy-xs-1 {\n    --bs-gutter-y: 0.25rem; }\n  .g-xs-2,\n  .gx-xs-2 {\n    --bs-gutter-x: 0.5rem; }\n  .g-xs-2,\n  .gy-xs-2 {\n    --bs-gutter-y: 0.5rem; }\n  .g-xs-3,\n  .gx-xs-3 {\n    --bs-gutter-x: 1rem; }\n  .g-xs-3,\n  .gy-xs-3 {\n    --bs-gutter-y: 1rem; }\n  .g-xs-4,\n  .gx-xs-4 {\n    --bs-gutter-x: 1.5rem; }\n  .g-xs-4,\n  .gy-xs-4 {\n    --bs-gutter-y: 1.5rem; }\n  .g-xs-5,\n  .gx-xs-5 {\n    --bs-gutter-x: 3rem; }\n  .g-xs-5,\n  .gy-xs-5 {\n    --bs-gutter-y: 3rem; } }\n\n@media (min-width: 1170px) {\n  .col-lg {\n    flex: 1 0 0; }\n  .row-cols-lg-auto > * {\n    flex: 0 0 auto;\n    width: auto; }\n  .row-cols-lg-1 > * {\n    flex: 0 0 auto;\n    width: 100%; }\n  .row-cols-lg-2 > * {\n    flex: 0 0 auto;\n    width: 50%; }\n  .row-cols-lg-3 > * {\n    flex: 0 0 auto;\n    width: 33.33333%; }\n  .row-cols-lg-4 > * {\n    flex: 0 0 auto;\n    width: 25%; }\n  .row-cols-lg-5 > * {\n    flex: 0 0 auto;\n    width: 20%; }\n  .row-cols-lg-6 > * {\n    flex: 0 0 auto;\n    width: 16.66667%; }\n  .col-lg-auto {\n    flex: 0 0 auto;\n    width: auto; }\n  .col-lg-1 {\n    flex: 0 0 auto;\n    width: 50%; }\n  .col-lg-2 {\n    flex: 0 0 auto;\n    width: 100%; }\n  .offset-lg-0 {\n    margin-left: 0; }\n  .offset-lg-1 {\n    margin-left: 50%; }\n  .g-lg-0,\n  .gx-lg-0 {\n    --bs-gutter-x: 0; }\n  .g-lg-0,\n  .gy-lg-0 {\n    --bs-gutter-y: 0; }\n  .g-lg-1,\n  .gx-lg-1 {\n    --bs-gutter-x: 0.25rem; }\n  .g-lg-1,\n  .gy-lg-1 {\n    --bs-gutter-y: 0.25rem; }\n  .g-lg-2,\n  .gx-lg-2 {\n    --bs-gutter-x: 0.5rem; }\n  .g-lg-2,\n  .gy-lg-2 {\n    --bs-gutter-y: 0.5rem; }\n  .g-lg-3,\n  .gx-lg-3 {\n    --bs-gutter-x: 1rem; }\n  .g-lg-3,\n  .gy-lg-3 {\n    --bs-gutter-y: 1rem; }\n  .g-lg-4,\n  .gx-lg-4 {\n    --bs-gutter-x: 1.5rem; }\n  .g-lg-4,\n  .gy-lg-4 {\n    --bs-gutter-y: 1.5rem; }\n  .g-lg-5,\n  .gx-lg-5 {\n    --bs-gutter-x: 3rem; }\n  .g-lg-5,\n  .gy-lg-5 {\n    --bs-gutter-y: 3rem; } }\n\n@media (min-width: 768px) and (min-width: 360px) {\n  .col-xs {\n    flex: 1 0 0%; }\n  .row-cols-xs-auto > * {\n    flex: 0 0 auto;\n    width: auto; }\n  .row-cols-xs-1 > * {\n    flex: 0 0 auto;\n    width: 100%; }\n  .row-cols-xs-2 > * {\n    flex: 0 0 auto;\n    width: 50%; }\n  .row-cols-xs-3 > * {\n    flex: 0 0 auto;\n    width: 33.33333%; }\n  .row-cols-xs-4 > * {\n    flex: 0 0 auto;\n    width: 25%; }\n  .row-cols-xs-5 > * {\n    flex: 0 0 auto;\n    width: 20%; }\n  .row-cols-xs-6 > * {\n    flex: 0 0 auto;\n    width: 16.66667%; }\n  .col-xs-auto {\n    flex: 0 0 auto;\n    width: auto; }\n  .col-xs-1 {\n    flex: 0 0 auto;\n    width: 16.66667%; }\n  .col-xs-2 {\n    flex: 0 0 auto;\n    width: 33.33333%; }\n  .col-xs-3 {\n    flex: 0 0 auto;\n    width: 50%; }\n  .col-xs-4 {\n    flex: 0 0 auto;\n    width: 66.66667%; }\n  .col-xs-5 {\n    flex: 0 0 auto;\n    width: 83.33333%; }\n  .col-xs-6 {\n    flex: 0 0 auto;\n    width: 100%; }\n  .offset-xs-0 {\n    margin-left: 0; }\n  .offset-xs-1 {\n    margin-left: 16.66667%; }\n  .offset-xs-2 {\n    margin-left: 33.33333%; }\n  .offset-xs-3 {\n    margin-left: 50%; }\n  .offset-xs-4 {\n    margin-left: 66.66667%; }\n  .offset-xs-5 {\n    margin-left: 83.33333%; }\n  .g-xs-0,\n  .gx-xs-0 {\n    --bs-gutter-x: 0; }\n  .g-xs-0,\n  .gy-xs-0 {\n    --bs-gutter-y: 0; }\n  .g-xs-1,\n  .gx-xs-1 {\n    --bs-gutter-x: 0.25rem; }\n  .g-xs-1,\n  .gy-xs-1 {\n    --bs-gutter-y: 0.25rem; }\n  .g-xs-2,\n  .gx-xs-2 {\n    --bs-gutter-x: 0.5rem; }\n  .g-xs-2,\n  .gy-xs-2 {\n    --bs-gutter-y: 0.5rem; }\n  .g-xs-3,\n  .gx-xs-3 {\n    --bs-gutter-x: 1rem; }\n  .g-xs-3,\n  .gy-xs-3 {\n    --bs-gutter-y: 1rem; }\n  .g-xs-4,\n  .gx-xs-4 {\n    --bs-gutter-x: 1.5rem; }\n  .g-xs-4,\n  .gy-xs-4 {\n    --bs-gutter-y: 1.5rem; }\n  .g-xs-5,\n  .gx-xs-5 {\n    --bs-gutter-x: 3rem; }\n  .g-xs-5,\n  .gy-xs-5 {\n    --bs-gutter-y: 3rem; } }\n\n@media (min-width: 768px) and (min-width: 1170px) {\n  .col-lg {\n    flex: 1 0 0%; }\n  .row-cols-lg-auto > * {\n    flex: 0 0 auto;\n    width: auto; }\n  .row-cols-lg-1 > * {\n    flex: 0 0 auto;\n    width: 100%; }\n  .row-cols-lg-2 > * {\n    flex: 0 0 auto;\n    width: 50%; }\n  .row-cols-lg-3 > * {\n    flex: 0 0 auto;\n    width: 33.33333%; }\n  .row-cols-lg-4 > * {\n    flex: 0 0 auto;\n    width: 25%; }\n  .row-cols-lg-5 > * {\n    flex: 0 0 auto;\n    width: 20%; }\n  .row-cols-lg-6 > * {\n    flex: 0 0 auto;\n    width: 16.66667%; }\n  .col-lg-auto {\n    flex: 0 0 auto;\n    width: auto; }\n  .col-lg-1 {\n    flex: 0 0 auto;\n    width: 16.66667%; }\n  .col-lg-2 {\n    flex: 0 0 auto;\n    width: 33.33333%; }\n  .col-lg-3 {\n    flex: 0 0 auto;\n    width: 50%; }\n  .col-lg-4 {\n    flex: 0 0 auto;\n    width: 66.66667%; }\n  .col-lg-5 {\n    flex: 0 0 auto;\n    width: 83.33333%; }\n  .col-lg-6 {\n    flex: 0 0 auto;\n    width: 100%; }\n  .offset-lg-0 {\n    margin-left: 0; }\n  .offset-lg-1 {\n    margin-left: 16.66667%; }\n  .offset-lg-2 {\n    margin-left: 33.33333%; }\n  .offset-lg-3 {\n    margin-left: 50%; }\n  .offset-lg-4 {\n    margin-left: 66.66667%; }\n  .offset-lg-5 {\n    margin-left: 83.33333%; }\n  .g-lg-0,\n  .gx-lg-0 {\n    --bs-gutter-x: 0; }\n  .g-lg-0,\n  .gy-lg-0 {\n    --bs-gutter-y: 0; }\n  .g-lg-1,\n  .gx-lg-1 {\n    --bs-gutter-x: 0.25rem; }\n  .g-lg-1,\n  .gy-lg-1 {\n    --bs-gutter-y: 0.25rem; }\n  .g-lg-2,\n  .gx-lg-2 {\n    --bs-gutter-x: 0.5rem; }\n  .g-lg-2,\n  .gy-lg-2 {\n    --bs-gutter-y: 0.5rem; }\n  .g-lg-3,\n  .gx-lg-3 {\n    --bs-gutter-x: 1rem; }\n  .g-lg-3,\n  .gy-lg-3 {\n    --bs-gutter-y: 1rem; }\n  .g-lg-4,\n  .gx-lg-4 {\n    --bs-gutter-x: 1.5rem; }\n  .g-lg-4,\n  .gy-lg-4 {\n    --bs-gutter-y: 1.5rem; }\n  .g-lg-5,\n  .gx-lg-5 {\n    --bs-gutter-x: 3rem; }\n  .g-lg-5,\n  .gy-lg-5 {\n    --bs-gutter-y: 3rem; } }\n\n.container,\n.container-fluid,\n.container-xs,\n.container-lg {\n  width: 100%;\n  padding-right: var(--bs-gutter-x, 0);\n  padding-left: var(--bs-gutter-x, 0);\n  margin-right: auto;\n  margin-left: auto; }\n\n@media (min-width: 360px) {\n  .container-xs {\n    max-width: calc(100% - 32px); } }\n\n@media (min-width: 1170px) {\n  .container-xs, .container-lg {\n    max-width: 1170px; } }\n\nbody {\n  max-width: 100vw;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  overflow-x: hidden;\n  margin: auto;\n  background-color: black; }\n  body,\n  body *,\n  body *:after,\n  body *:before {\n    box-sizing: border-box; }\n\nmain {\n  position: relative;\n  z-index: 1;\n  flex-grow: 1; }\n\na {\n  text-decoration: none;\n  -webkit-tap-highlight-color: transparent; }\n\np {\n  margin-top: 0;\n  margin-bottom: 1em; }\n  p:last-child {\n    margin-bottom: 0; }\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin-top: 0; }\n\nsvg {\n  fill: currentColor; }\n\nheader {\n  height: 100px;\n  background-color: red; }\n\nfooter {\n  height: 100px;\n  background-color: green; }\n","// Container widths\n//\n// Set the container width, and override it for fixed navbars in media queries.\n\n@if $enable-grid-classes {\n  // Single container class with breakpoint max-widths\n  .container,\n  // 100% wide container at all breakpoints\n  .container-fluid {\n    @include make-container();\n  }\n\n  // Responsive containers that are 100% wide until a breakpoint\n  @each $breakpoint, $container-max-width in $container-max-widths {\n    .container-#{$breakpoint} {\n      @extend .container-fluid;\n    }\n\n    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {\n      %responsive-container-#{$breakpoint} {\n        max-width: $container-max-width;\n      }\n\n      // Extend each breakpoint which is smaller or equal to the current breakpoint\n      $extend-breakpoint: true;\n\n      @each $name, $width in $grid-breakpoints {\n        @if ($extend-breakpoint) {\n          .container#{breakpoint-infix($name, $grid-breakpoints)} {\n            @extend %responsive-container-#{$breakpoint};\n          }\n\n          // Once the current breakpoint is reached, stop extending\n          @if ($breakpoint == $name) {\n            $extend-breakpoint: false;\n          }\n        }\n      }\n    }\n  }\n}\n","// Container mixins\n\n@mixin make-container($gutter: $container-padding-x) {\n  width: 100%;\n  padding-right: var(--#{$variable-prefix}gutter-x, #{$gutter});\n  padding-left: var(--#{$variable-prefix}gutter-x, #{$gutter});\n  margin-right: auto;\n  margin-left: auto;\n}\n","footer {\r\n  height: 100px;\r\n  background-color: green;\r\n}","header {\r\n  height: 100px;\r\n  background-color: red;\r\n}"]}